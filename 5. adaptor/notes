- One problem that you might have is you might have some code that is designed to work in a particular environment or with a particular tool you want the exact same code to work in a different environment or with another object to accomplish the same test.
- Basiclly for example you have write some code in you web devloper environemnt browser but you want the exact same code to run in a know JS envrionment

- For that we use Adaptor pattern

- e.g: browser have localhost functionality So we can define a Class like localStorage and define all the method

- PROS:
    - Helps achieve reusability and flexibility.
    - You can separete the interface or data conversion code from the promary business logic of the program
    - You can introduce new types of adapters into the programs without breaking the existing client code , as long as they work with the adapters through the client interface.

- CONS:
    - The overall complexity of the code increases because you need to introduce a set of new interfaces and classes. Sometimes it's simpler just to change the service class so that it matches the rest of your code.
    - Sometimes many adaptations are required along an adapter chain to reach the type which is required.

- WHEN:
    - Use the Adapter class when you want to use some existing class, but its interface isn't compatible with the rest of your code.
    - Use the pattern when you want to reuse several existing classes that lack some common functionality that can't be added to the superclass.