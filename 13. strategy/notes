- Define a family of algorithms, encapsulate each one, and make them interchangeable. Strategy let's the algorithm vary independently from the clients that use it.

- PROS:
    - A family of algorithms can be define as a class hierarchy and can be used interchangeably to alter application behavior without changing its architecture.
    - By encapsulating the algorithm separately, new algorithms complying with the same interface can be easily introduced. The application can switch strategies at run-time.
    - Strategy enables the clients to choose the required algorithm, without using a "switch" statement or a series of "if-else" statements.
    - Data structure used for implementing the algorithm are campletely encapsulated in Strategy classes. Therefore, the implementation of an algorithm can be changed without affecting the context class.

- CONS:
    - The application must be aware of all the strategies to select the right one for the right situation.
    - Context and the Strategy classes normally communicate through the interface specified by the abstract Strategy base class. Strategy base class must expose interface for all the required behaviours, which some conrete Strategy classes might not implement.
    - In most cases, the application configures the context with the required strategy object. Therefore, the application needs to create and maintain two objects in place of one.

- WHEN:
    - Use the strategy pattern when you want to use different variants of an algorithm within an objects and be able to switch form one algorithm to another during runtime.
    - Use the Strategy when you have a lot of similar classes that only differ in the way they execute some behavior.
    - Use the pattern to isolate the business logic of a class from the implementation details of algorithms that may not be as important the context of that logic.
    - Use the pattern when your class has a massive conditional operator that switches between different variants of the same algorithm.