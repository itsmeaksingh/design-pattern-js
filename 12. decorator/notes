- Decorator is a structure design pattern that lets you attach new behaviors to objects by placing these objects inside special wrapper objects that contain the behaviors.

- Attach Addition responsibilities to an object dynamically. Decorators provide a flexible alternative to sub classing for extending functionality.

- E.g: Wearing clothes is an example of using decorators. When you’re cold, you wrap yourself in a sweater. If you’re still cold with a sweater, you can wear a jacket on top. If it’s raining, you can put on a raincoat. All of these garments “extend” your basic behavior but aren’t part of you, and you can easily take off any piece of clothing whenever you don’t need it.


- PROS:
    - The decorator pattern can be used to make it possible to extend (decorate) the functionality of certain object at runtime.
    - The decorator pattern is an alternative to subclassing. Subclassing adds behavior at compile time, and the change affects all instances of the original class. decorating can provide new behavior at runtime for individual objects.
    - Decorator offers a pay-as-you-go approach to adding responsibilities. Instead of trying to support all foreseeable feature in a complex, customizable class, you can define a simple class and add functionality incrementally with decorator objects.
    - Immutable objects can be build without much complex logic in object building process.

- CONS:
    - Decorators can complicate the process of instantiating the component because you not only have to instantiate the component, but wrap it in a number of decorators.
    - It can be complicated to have decorators keep track of other decorators, because to look back into multiple layers of the decorator chain starts to push the decorator pattern beyond its true instent.

- WHEN:
    - Use the decorator pattern when you need to be able to assign extra behavior to objects at runtime without breaking the code that uses these objects.
    - Use the pattern when it's awkward or not possible to extend an object's behavior using inheritance.